service: path-2-mastery-api

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-domain-manager
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-2
  memorySize: 512
  timeout: 6
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

package:
  include:
    - lessons.json
  exclude:
    - lessons.json

functions:
  read_lessons:
    handler: lessons_handler.all_lessons
    events:
      - http:
          path: lessons
          method: get
          cors: true

  read_path:
    handler: lessons_handler.read_path
    events:
    - http:
        path: /apprentice/{apprentices_id}/path
        method: get
        request:
          parameters:
            paths:
              apprentices_id: true
        cors: true

resources:
  Resources:
    ApprenticesPathsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        -
          AttributeName: email
          AttributeType: S
        KeySchema:
        -
          AttributeName: email
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

custom:
  customDomain:
    domainName: api.faros.io
    certificateName: faros.io
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'npm'
